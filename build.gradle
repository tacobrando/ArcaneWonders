import org.gradle.api.JavaVersion
import org.gradle.api.publish.maven.MavenPublication
import org.gradle.api.tasks.compile.JavaCompile
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.9.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'me.tagavari.nmsremap' version '1.0.0'
}

group = 'dev.tacobrando'
version = '1.0-ALPHA'

repositories {
    gradlePluginPortal()
    mavenLocal()
    mavenCentral()
    maven {
        url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/central"
    }
    maven {
        url "https://maven.enginehub.org/repo/"
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot:1.20.1-R0.1-SNAPSHOT:remapped-mojang"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions.jvmTarget = "17"
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks {
    shadowJar {
        archiveClassifier.set("shadow")
        // export final jar to server plugins folder
        doLast {
            var exportPath = project.findProperty("plugin.export")

            if(exportPath instanceof String) {
                copy {
                    from(archiveFile)
                    into(new File(exportPath))
                    rename(".*", "ArcaneWonders.jar")
                }
                println("Exported plugin to $exportPath")
            }
            else {
                println("Provide plugin export path in 'gradle.properties'")
            }
        }
    }

    jar {
        dependsOn(shadowJar)
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components['java']
        }
    }
}
